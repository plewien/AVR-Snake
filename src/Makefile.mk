###############################################################################
# Makefile for the project SnakeProject
###############################################################################

## General Flags
PROJECT = SnakeProject
MCU = atmega16
CC = avr-gcc
CPP = avr-g++
SHELL = CMD

## Build directories
BDIR = ../build
ODIR = $(BDIR)/obj
DDIR = $(ODIR)/dep
IDIR = ../include
TARGET = $(BDIR)/$(PROJECT).elf

## Options common to compile, link and assembly rules
COMMON = -mmcu=$(MCU)

# Compiler flags to generate dependency files.
GENDEPFLAGS = -MP -MD -MT $(*F).o # -MF $(DDIR)/$(@F).d

## Compile options common for all C compilation units.
CFLAGS = $(COMMON)
CFLAGS += -Wall -gdwarf-2 -DF_CPU=7379300UL -Os -fsigned-char -fshort-enums
CFLAGS += -I$(IDIR) $(GENDEPFLAGS) # -MF dep/$(@F).d 

## Assembly specific flags
ASMFLAGS = $(COMMON)
ASMFLAGS += $(CFLAGS)
ASMFLAGS += -x assembler-with-cpp -Wa,-gdwarf2

## Linker flags
LDFLAGS = $(COMMON)
# LDFLAGS += -Wl,-Map=SnakeProject.map
LDFLAGS += --print-memory-usage

## Intel Hex file production flags
HEX_FLASH_FLAGS = -R .eeprom -R .fuse -R .lock -R .signature

HEX_EEPROM_FLAGS = -j .eeprom
HEX_EEPROM_FLAGS += --set-section-flags=.eeprom="alloc,load"
# HEX_EEPROM_FLAGS += --change-section-lma .eeprom=0 # --no-change-warnings

## Header dependencies
_INC = console.h snake.h
INCLUDE = $(patsubst %,$(IDIR)/%,$(_INC))

## Objects that must be built in order to link
_OBJ = console.o snake.o snakedraw.o snakeplay.o
OBJECTS = $(patsubst %,$(ODIR)/%,$(_OBJ))

## Dependencies
_DEP = SnakeProject.hex SnakeProject.eep
DEPS = $(patsubst %,$(BDIR)/%,$(_DEP))

## Objects explicitly added by the user
LINKONLYOBJECTS = 

# Define Messages
MSG_BEGIN = -------- BEGIN --------
MSG_END = --------  END  --------
MSG_SIZE_BEFORE = Size before: 
MSG_SIZE_AFTER = Size after:

## Build
.PHONY: all
all: begin build end
build: elf hex eep lss
elf: $(TARGET)
hex: $(BDIR)/$(PROJECT).hex
eep: $(BDIR)/$(PROJECT).eep
lss: $(BDIR)/$(PROJECT).lss 
	
## Compile
$(ODIR)/%.o: %.c $(INCLUDE) | $(ODIR)
	@echo "----" $@ "----"
	$(CC) -c $< -o $@ $(CFLAGS)

$(ODIR):
	@echo "----" $@ "----"
	mkdir -p $(ODIR)

##Link
$(TARGET): $(OBJECTS)
	@echo "---- LINKING ----"
	$(CC) $(LDFLAGS) $(OBJECTS) $(LINKONLYOBJECTS) $(LIBDIRS) $(LIBS) -o $(TARGET)

$(BDIR)/%.hex: $(TARGET) | $(BDIR)
	@echo "----" $@ "----"
	avr-objcopy $(HEX_FLASH_FLAGS) -O ihex $< $@

$(BDIR)/%.eep: $(TARGET) | $(BDIR)
	@echo "----" $@ "----"
	-avr-objcopy $(HEX_EEPROM_FLAGS) -O ihex $< $@ || exit 0

$(BDIR)/%.lss: $(TARGET) | $(BDIR)
	@echo "----" $@ "----"
	avr-objdump -h -S $< > $@

$(BDIR):
	@echo "----" $@ "----"
	mkdir -p $(BDIR)

# Eye candy: AVR Studio 3.x does not check make's exit code but relies on
# the following magic strings to be generated by the compile job.
begin:
	@echo $(MSG_BEGIN)

end:
	@echo $(MSG_END)

## Clean target
.PHONY: clean
clean:
	@echo "---- CLEANING ----"
	rm -f *~ $(ODIR)/* $(BDIR)/*.*


## Other dependencies
-include $(OBJECTS:%.o=%.d)
-include $(sh mkdir -p $(DDIR) 2>NUL) $(wildcard $(DDIR)/*)
# include $(wildcard $(ODIR)/*.d)

